---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';

type Props = CollectionEntry<'walks'>['data'];

const { title, description, city, duration, distance, difficulty, startPoint, endPoint, highlights, coverImage, updatedDate } = Astro.props;
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.walk-hero {
				width: 100%;
				height: 400px;
				object-fit: cover;
				border-radius: 12px;
				margin-bottom: 2em;
			}
			.walk-meta {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
				gap: 1.5rem;
				margin: 2em 0;
				padding: 1.5em;
				background: #f8f9fa;
				border-radius: 8px;
			}
			.meta-item {
				text-align: center;
			}
			.meta-label {
				display: block;
				font-size: 0.875rem;
				color: #666;
				margin-bottom: 0.25rem;
			}
			.meta-value {
				font-size: 1.125rem;
				font-weight: 600;
				color: #333;
			}
			.difficulty {
				display: inline-block;
				padding: 0.25em 0.75em;
				border-radius: 4px;
				font-size: 0.875rem;
				font-weight: 500;
			}
			.difficulty.easy {
				background: #d4f4dd;
				color: #1a7431;
			}
			.difficulty.moderate {
				background: #fff4d4;
				color: #7a5a1a;
			}
			.difficulty.challenging {
				background: #f4d4d4;
				color: #7a1a1a;
			}
			.highlights {
				margin: 2em 0;
			}
			.highlights h3 {
				margin-bottom: 1em;
			}
			.highlights ul {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
				gap: 0.5rem;
				list-style: none;
				padding: 0;
			}
			.highlights li {
				padding: 0.5em 0;
				padding-left: 1.5em;
				position: relative;
			}
			.highlights li::before {
				content: "→";
				position: absolute;
				left: 0;
				color: #4078c0;
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: rgb(var(--gray-dark));
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
				text-align: center;
			}
			.back-link {
				display: inline-block;
				margin-bottom: 1em;
				color: #4078c0;
				text-decoration: none;
			}
			.back-link:hover {
				text-decoration: underline;
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="walk-hero">
					{coverImage && <img width={1020} height={400} src={coverImage} alt={title} class="walk-hero" />}
				</div>
				<div class="prose">
					<a href={`/cities/${city}`} class="back-link">← Back to {city.charAt(0).toUpperCase() + city.slice(1)} walks</a>
					<div class="title">
						<h1>{title}</h1>
						<p>{description}</p>
						{updatedDate && (
							<div class="date">
								Last updated on <FormattedDate date={updatedDate} />
							</div>
						)}
					</div>
					
					<div class="walk-meta">
						<div class="meta-item">
							<span class="meta-label">Duration</span>
							<span class="meta-value">{duration}</span>
						</div>
						<div class="meta-item">
							<span class="meta-label">Distance</span>
							<span class="meta-value">{distance}</span>
						</div>
						<div class="meta-item">
							<span class="meta-label">Difficulty</span>
							<span class={`difficulty ${difficulty}`}>{difficulty}</span>
						</div>
						<div class="meta-item">
							<span class="meta-label">Start Point</span>
							<span class="meta-value">{startPoint}</span>
						</div>
						<div class="meta-item">
							<span class="meta-label">End Point</span>
							<span class="meta-value">{endPoint}</span>
						</div>
					</div>

					{highlights && highlights.length > 0 && (
						<div class="highlights">
							<h3>Highlights along the way</h3>
							<ul>
								{highlights.map((highlight) => (
									<li>{highlight}</li>
								))}
							</ul>
						</div>
					)}

					<slot />
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>